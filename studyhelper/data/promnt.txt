Hi, can you generate  an intermediate VLSI exam  ...  and return it as a json struct that satisfy the following Json Schemma validator:

{
  "type": "array",
  "items": {
    "type": "object",
    "properties": {
      "name": {"type": "string"},
      "enforce_expertise_level": {"type": "boolean"},
      "expertise_level": {"type": "string"},
      "provider": {"type": "string"},
      "tags": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {"type": "string"}
          },
          "required": ["name"]
        }
      },
      "questions": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "expertise_level": {"type": "string"},
            "html": {"type": "string"},
            "is_published": {"type": "boolean"},
            "maximum_marks": {"type": "number"},
            "tags": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {"type": "string"}
                },
                "required": ["name"]
              }
            },
            "choices": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "is_correct": {"type": "boolean"},
                  "html": {"type": "string"},
                  "reason": {"type": "string"}
                },
                "required": ["is_correct", "html", "reason"]
              }
            }
          },
          "required": ["html", "is_published", "maximum_marks", "tags", "choices"]
        }
      }
    },
    "required": ["name", "provider", "tags", "questions"]
  }
}

The value for keyname "provider" is required, so set it to "Study Helper".
The value for keyname "tags" is required, so set it to [{"name": "VLSI"}] in all its occurrences.
The value for keyname "name" is the exam title  at it first occurrence (at the top).
The value for keyname "html" (in a question object) is the question text.
The possible values for keyname "expertise_level" are: "NO" (for Novice), "AD" (for Advanced Beginner), "CO", (for Competent), "PR" (for Proficient) or "EX" (for Expert).
The value for keyname "enforce_expertise_level" is: false
The value of "expertise_level" of the exam shoulbe set according its difficulty, and he value of "expertise_level" of each question shouldbe set to be lower o equal to the exam's "expertise_level".
The value for keyname "choices" are a list of option objects.
A question can have from 3 (min) up to 12 (max) choices (options).
A question may have multiple correct choices (options)  but no more than 30% of choices can be correct.
The value for keyname "html" (in a option object) is the option text.
if an option is correct then set the value of its "is_correct" to: true
if an option is incorrect then set the value of its "is_correct" to: false
the value for keyname "is_published" is always: true
the value for keyname "maximum_marks" is always: 4.0
the value for keyname "reason" a short explanation on why the current option is correct or not.